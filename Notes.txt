                Chapter 1
#include <iostream> - Preprocessor Directive
using namespace std; - Standard Namespace

int main() - main function
{

}

cout - console output
endl - end line (newline)
<< - Stream insertion operator (sends new string to console)

Programming Errors
Syntax Error - 
Runtime Error - 
Logic Errors - 

                Chapter 2
cin - object to read input from the keyboard

Identifiers - the names that identify elements such as variables
and functions in a program.

Identifier - a sequence of characters that consists of letters, digits, 
and underscores (cannot start with a digit)
* Cannot ba a reserved word (cin, cout).
* Must start with a letter or underscore
    ^
    |
8/20/25 ----------------------------------

Variables are used to represent values that may be changed in the program.
Examples:

int x = 1; -- Integer Variable
double radius = 1.8; -- Double Variable
char a; -- Character Variable

        Named Constants
A named constant is an identifier that represents a permanent value.
* Constant names should be in uppercase.
* You don't have to repeatedly type the same value.

Examples:
const datatype CONSTANTNAME = VALUE;
const double PI = 3.14159;
const int SIZE = 3;

        sizeof Function
You can use the sizeof function to find the size of a type.

        Integer Division
5 / 2 yields 2
5.0 / 2 yields 2.5

        Augmented Assignment Operators
+= -> i += 8 -> i = i + 8
-+ -> i -= 8 -> i = i - 8
*= -> i *= 8 -> i = i * 8
/= -> i /= 8 -> i = i / 8
%= -> i %= 8 -> i = i & 8

        Increment and Decrement Operators
++var -> Preincrement - increases by 1 and evaluated to the new value in var after the increment
var++ -> Postincrement - evaluates to the original value in var and increments by 1.
--var -> Predecrement - decrements var by 1 and evaluates to the new value in var after the decrement.
var-- -> Postdecrement - Evaluates to the original value in var and decrements var by 1.
    Examples:
int i = 10;                 int newNum = 10 * i;
int newNum = 10 * i++; ---> i = i + 1;

        Type Casting
Implicit Casting - double d = 3; (type widening)
Explicit Casting - int i = static_cast<int>(3.0); (type narrowing)
int i = (int)3.9; (fraction part is truncated)
    ^
    |
8/22/25 ----------------------------------

                Chapter 3
        Relational Operators
< - less than
<= - less than or equal to
> - greater than
>= - greater than or equal to
== - equal to
!= - not equal to

        Logical Operators
! - not - logical negation
&& - and - logical conjugation
|| - or - logical disjunction

        Switch Statements
A switch statement executes statements based on the value of a variable or an expression.

switch (status)
{
 case 0: compute taxes for single fliers;
 break;

 case 1: compute taxes for married file jointly;
 break;

 case 2: compute taxes for married file seperately;
 break;

 case 3; compute taxes for head of household;
 break;

 default: cout << "Errors: invalid status" << endl;
}

        Conditional Operator
if (x > 0)
  y = 1
else
  y = -1;

is equivalent to

y = (x > 0) ? 1 : -1;
(booleanExpression) ? expression1 : expression2

        Generating Random Numbers
rand() - can be used to obtain a random number

Include <cstdlib> for rand() and srand() functions.
Use srand(time(0)); before rand function. (seed)

Include <ctime> library for time function.

    ^
    |
8/25/25 ----------------------------------

                Chapter 4 - Mathematical Functions, Characters, and Strings
                        Trigonometric Functions
sin(radians) - Returns the trigonometric sine of an angle in radians.
cos(radians) - Returns the trigonometric cosine of an angle in radians.
tan(radians) - Returns the trigonometric tangent of an angle in radians.
asin(a) - Returns the angle in radians for the inverse of sine.
acos(a) - Returns the angle in radians for the inverse of cosine.
atan(a) - Returns the anfle in radians for the inverse of tangent.

        Exponent Functions
exp(x) - Returns e raised to power of x(e^x). | Ex: exp(1.0) returns 2.71828
log(x) - Returns the natural logarithm of x (ln(x)). Ex: log(E) returns 1.0
log10(x) - Returns the base 10 logarithm of x. Ex: log10(10.0) returns 1.0
pow(a, b) - Returns a raised to the power of b. Ex: pow(2.0, 3) returns 8.0
sqrt(x) - Returns the square root of x for x >= 0. sqrt(4.0) returns 2.0

        Rounding Functions
ceil(x) = x is rounded up to its nearest integer. This integer is returned as a 
double value.
Ex: ceil(2.1) returns 3.0
    ceil(2.0) returns 2.0
    ceil(-2.1) returns -2.0

floor(x) = x is rounded down to its nearest integer. This integer is returned as
a double value.
Ex: floor(2.1) returns 2.0
    floor(2.0) returns 2.0
    floor(-2.1) returns -3.0

        The min, max, and abs Functions
max(2,3) returns 3
min(2.5, 4.6) returns 2.5
abs(-2) returns 2

        Character Data Type
A char data type represents a single character.

The increment and decrement operators can also be used on char variables to get the next or
preceding character.
Ex: char ch = 'a'
    cout << ++ch
    (will print "b")

    char ch = 'a'
    cout << ch++
    (will still print "a")

        Escape Sequences for Special Characters
\b - Backspace
\t - Tab
\n - Linefeed
\f - Formfeed
\r - Carriage Return
\\ - Backslash
\' - Single Quote
\" - Double Quote

        Character Functions
isdigit(ch) - Returns true if the specified character is a digit.
isalpha(ch) - Returns true if the specified character is a letter.
isalnum(ch) - Returns true if the specified character is a letter or number.
islower(ch) - Returns true if the specified character is a lowercase letter.
isupper(ch) - Returns true if the specified character is an uppercase letter.
isspace(ch) - Returns true if the specified character is a whitespace character.
tolower(ch) - Returns the lowercase of the specified character.
toupper(ch) - Returns the uppercase of the specified character.

        The String Type
string s;
string message = "Programming is fun";

length() - Returns the number of characters in this string.
size() - Same as length();
at (index) - Returns the character at the specified index from this string.
    ^
    |
8/27/25 ----------------------------------

        Concatenating Strings
string s3 = s1 + s2
message += "and programming is fun";

        Reading Strings
The getline function in the string header file, which reads a string from the keyboard using the syntax:
getline(cin, s , delimitCharacter)

        Formatting Console Output
setprecision(n) - sets the precision of a floating-point number
fixed - displays floating-point numbers in fixed-point notation
showpoint - causes a floating-point number to be displayed with a decial point
and trailing zeros even if it has no fractional part
setw(width) - specifies the width of a print field
left - justifies the output to the left
right - justifies the output to the right

                Chapter 5 - Loops
While Loop

while(loop condition-condition) {
        // Loop-Body;
        Statements;
}

For Loop

for(int count = 0; count<100; count++) {
        cout << "Welcome to C++";
}

Do-While Loop

do {
        // Loop body;
        Statements(s);
} while (loop-continuation-condition)
    ^
    |
8/29/25 ----------------------------------
        Chapter 6 - Functions
A function is a collection of statements that are grouped together to perform an operation.
Functions can be used to define reusable code and organize and simplify
code.

    return value type  method   formal 
                        name    parameters                    
                    |    |      |        |
                    V    V      V        V
function header -> int max (int num1, int num2)
        {
                int result;
function        
body  ->        if (num1 > num2)
                        result = num1;
                else
                        result = num2;

                return result;
        }

int z = max(x, y); <- Invoking a function

Function signature is the combination of the function name and the parameter
list.

The variables defines in the function header are known as formal
parameters.

When a function is invoked, you pass a value to the parameter. This value 
is referred to as actual parameter or argument.

By default, the arguments are passed by value to parameters when Invoking
a function.

        Overloading Functions
Overloading functions enables you to define the functions with the same name 
as long as their signatures are different.

        Function Prototypes
Before a function is called, it must be declared first. One way to ensure that 
is to place the delcaration before all functions calls. Another way to approach
it is to declare a function prototype before the function is called. A function 
prototype is a function declaration without implementation. The implementation 
can be given later in the program.

        Default Arguments
C++ allows you to delcare functions with default argument values. The default 
values are passed to the parameters when a function is invoked without the 
arguments.

        Inline Functions
C++ provides inline functions to avoid function calls. Inline functions are not
called; rather the compiler copies the function code inline at the point of each
ivocation. To specify an inline function, precede the function declaration with
the inline keyword.

inline void f(int month, int year)
{
        cout << "month is " << month << endl;
        cout << "year is " << year << endl;
}
    ^
    |
9/5/25 ----------------------------------

        Chapter 17 - Recursions
A technique that leads to elegant solutions to problems that are difficult
to program using simple loops.

A recursive function is one that invokes itself.
    ^
    |
9/5/25 ----------------------------------